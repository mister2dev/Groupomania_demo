const Clarifai = require("clarifai");

// Initialiser Clarifai avec ta cl√© API
const app = new Clarifai.App({
  apiKey: process.env.CLARIFAI_API_KEY,
});

async function moderateImage(imageUrl) {
  try {
    const response = await app.models.predict(
      Clarifai.MODERATION_MODEL,
      imageUrl
    );

    // V√©rifie si Clarifai a bien retourn√© des r√©sultats
    if (!response.outputs || response.outputs.length === 0) {
      console.error("‚ö†Ô∏è Aucun r√©sultat de mod√©ration re√ßu !");
      return false;
    }

    // R√©cup√©rer les concepts de la mod√©ration
    const concepts = response.outputs[0].data.concepts;

    // Transformer la r√©ponse en un objet plus lisible
    const moderationResult = concepts.reduce((acc, concept) => {
      acc[concept.name] = concept.value;
      return acc;
    }, {});

    console.log("üîç R√©sultats de la mod√©ration d'image :", moderationResult);

    // D√©finir un seuil de tol√©rance (ex: 0.8 = 80% de confiance)
    const SEUIL_INAPPROPRIE = 0.65;

    // V√©rifie si une cat√©gorie sensible d√©passe le seuil
    const categoriesInterdites = [
      "explicit", // Contenu explicite
      "suggestive", // Contenu suggestif
      "gore", // Violence / Sanglant
      "drug", // Drogues
    ];

    const imageRefusee = categoriesInterdites.some(
      (categorie) => moderationResult[categorie] > SEUIL_INAPPROPRIE
    );

    if (imageRefusee) {
      console.log("‚ùå Image refus√©e ! Trop explicite.");
      return false;
    }

    console.log("‚úÖ Image valid√©e !");
    return true;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la mod√©ration d'image avec Clarifai :",
      error
    );
    return false;
  }
}

module.exports = { moderateImage };
